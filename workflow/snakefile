from pathlib import Path

# Detect reads
SAMPLES_reads = sorted({f.stem.rsplit("_", 1)[0] for f in Path("reads").glob("*_1.fq.gz")})
SAMPLES_bams = sorted({f.stem.rsplit("_", 1)[0] for f in Path("mapped").glob("*.bam")})

if not SAMPLES_reads and SAMPLES_bams:
    print("Using sequencing reads for the genome skimming")
    SAMPLES=SAMPLES_bams

if not SAMPLES_bams and SAMPLES_reads:
    print("Using bam files for the genome skimming")
    SAMPLES=SAMPLES_reads

if not SAMPLES_bams and not SAMPLES_reads:
    sys.exit(f"❌  No input data was provided in the reads or bams directories")

# Generate output
rule all:
    input:
        "distance_matrix.txt"

# Rules
rule bam_to_fastq:
    input:
        "mapped/{sample}.bam"
    output:
        r1="reads/{sample}_1.fq",
        r2="reads/{sample}_2.fq"
    log:
        "logs/bam_to_fastq/{sample}.log"
    threads: 4
    params:
        collate="",
        fastq="-n",
    resources:
        mem_mb=lambda wildcards, input, attempt: max(8*1024, int(input.size_mb) * 2 ** (attempt - 1)),
        runtime=lambda wildcards, input, attempt: max(15, int(input.size_mb / 20) * 2 ** (attempt - 1))
    wrapper:
        "v7.2.0/bio/samtools/fastq/separate"

rule decompress_fastq:
    input:
        r1="reads/{sample}_1.fq.gz",
        r2="reads/{sample}_2.fq.gz"
    output:
        r1="reads/{sample}_1.fq",
        r2="reads/{sample}_2.fq"
    log:
        "logs/decompress_fastq/{sample}.log"
    threads: 1
    localrule: True
    shell:
        """
        gunzip -c {input.r1} > {output.r1}
        gunzip -c {input.r2} > {output.r2}
        """

rule simplify_reads:
    input:
        r1="reads/{sample}_1.fq",
        r2="reads/{sample}_2.fq"
    output:
        "reads/{sample}.fq"
    log:
        "logs/decompress_fastq/{sample}.log"
    threads: 1
    localrule: True
    shell:
        """
        rm {input.r2}
        mv {input.r2} {output}
        """

rule skmer:
    input:
        expand("reads/{sample}.fq", sample=SAMPLES)
    output:
        "distance_matrix.txt"
    log:
        "logs/skmer/skmer.log"
    threads: 8
    conda:
        "envs/skmer.yml"
    params:
        inputdir="reads",
        outputbase="distance_matrix"
    resources:
        mem_mb=lambda wildcards, input, attempt: max(64*1024, int(input.size_mb * 10) * 2 ** (attempt - 1)),
        runtime=lambda wildcards, input, attempt: max(15, int(input.size_mb / 50) * 2 ** (attempt - 1))
    shell:
        """
        rm {params.inputdir}/*_2.fq
        skmer reference {params.inputdir} -p {threads} -o {params.outputbase}
        """
